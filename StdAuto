package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.IrSeekerSensor;
import com.qualcomm.robotcore.hardware.Servo;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.ftcrobotcontroller.R;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DeviceInterfaceModule;
import com.qualcomm.robotcore.hardware.DigitalChannelController;

/**
 * Created by emilycohen on 10/10/15.
 */

public class StdAuto extends LinearOpMode {

    final static double MOTOR_POWER = 0.65; // Higher values will cause the robot to move faster
    final static double MOTOR_POWER_SLOW = 0.45; // Higher values will cause the robot to move faster

    DcMotor motorLeftFront;
    DcMotor motorLeftBack;
    DcMotor motorRightFront;
    DcMotor motorRightBack;

    //Servo lift;
    Servo buttonpresser;
    Servo climbers;

    ColorSensor sensorRGB;
    DeviceInterfaceModule cdim;

    // we assume that the LED pin of the RGB sensor is connected to
    // digital port 5 (zero indexed).
    static final int LED_CHANNEL = 5;


    @Override
    public void runOpMode() throws InterruptedException {

        // set up the hardware devices we are going to use
        motorLeftFront = hardwareMap.dcMotor.get("left_front");
        motorLeftBack = hardwareMap.dcMotor.get("left_back");
        motorRightFront = hardwareMap.dcMotor.get("right_front");
        motorRightBack = hardwareMap.dcMotor.get("right_back");


        // write some device information (connection info, name and type)
        // to the log file.
        hardwareMap.logDevices();

        // get a reference to our DeviceInterfaceModule object.
        cdim = hardwareMap.deviceInterfaceModule.get("dim");

        // set the digital channel to output mode.
        // remember, the Adafruit sensor is actually two devices.
        // It's an I2C sensor and it's also an LED that can be turned on or off.
        cdim.setDigitalChannelMode(LED_CHANNEL, DigitalChannelController.Mode.OUTPUT);

        // get a reference to our ColorSensor object.
        sensorRGB = hardwareMap.colorSensor.get("lady");

        // bEnabled represents the state of the LED.
        boolean bEnabled = true;

        // turn the LED on in the beginning, just so user will know that the sensor is active.
        cdim.setDigitalChannelState(LED_CHANNEL, bEnabled);

        // wait one cycle.
        waitOneFullHardwareCycle();

        // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues[] = {0F,0F,0F};

        // values is a reference to the hsvValues array.
        final float values[] = hsvValues;

        // get a reference to the RelativeLayout so we can change the background
        // color of the Robot Controller app to match the hue detected by the RGB sensor.
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(R.id.RelativeLayout);

        // bPrevState and bCurrState represent the previous and current state of the button.
        boolean bPrevState = false;
        boolean bCurrState = false;

        //lift = hardwareMap.servo.get("servo_3");
        buttonpresser = hardwareMap.servo.get("servo_1");
        climbers = hardwareMap.servo.get("servo_6");

        motorLeftFront.setDirection(DcMotor.Direction.REVERSE);
        //motorLeftBack.setDirection(DcMotor.Direction.REVERSE);
        //hightorque

        double encoderright = motorRightBack.getCurrentPosition();
        double encoderleft = motorLeftBack.getCurrentPosition();

        // wait for the start button to be pressed
        waitForStart();

        //drive to the wall
        goforward(1000);
        turnright(200);
        goforward(500);


        //stop moving
        stopmotors();

        //lift lift
//        for(double time = 0; time<100; time++){
//            lift.setPosition(0);
//        }
//        lift.setPosition(.5);

        //move forward
        goforward(100);

        //dispense people
        climbers.setPosition(1);

        //move dispenser back
        wait(4000);
        climbers.setPosition(0);

        //color sensor part, move one of the servos depending on the color

        // convert the RGB values to HSV values.
        Color.RGBToHSV((sensorRGB.red() * 255) / 800, (sensorRGB.green() * 255) / 800, (sensorRGB.blue() * 255) / 800, hsvValues);

        if(sensorRGB.red() > sensorRGB.blue()) {
            telemetry.addData("RED", 1);
        } else if(sensorRGB.blue() > sensorRGB.red()) {
            telemetry.addData("BLUE", 1);
        } else {
            telemetry.addData("GREEN", 1);
        }

        // change the background color to match the color detected by the RGB sensor.
        // pass a reference to the hue, saturation, and value array as an argument
        // to the HSVToColor method.
        relativeLayout.post(new Runnable() {
            public void run() {
                relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
            }
        });

        //put back back


        //move backwards
        gobackwards(100);

//        //lower lift
//        for(double time = 0; time<100; time++){
//            lift.setPosition(1);
//        }
//        lift.setPosition(.5);

        //move backwards
        gobackwards(100);

        //turn towards ramp
        turnright(100);

        //up ramp
        goforward(1000);
    }

    public void goforward(double encodervalue){
        double encoderright = motorRightBack.getCurrentPosition();
        double encoderleft = motorLeftBack.getCurrentPosition();
        while ((Math.abs(encoderright)+Math.abs(encoderleft))/2<encodervalue){
            motorLeftFront.setPower(MOTOR_POWER);
            motorLeftBack.setPower(MOTOR_POWER);
            motorRightFront.setPower(MOTOR_POWER);
            motorRightBack.setPower(MOTOR_POWER);
        }
    }

    public void gobackwards(double encodervalue){
        double encoderright = motorRightBack.getCurrentPosition();
        double encoderleft = motorLeftBack.getCurrentPosition();
        while ((Math.abs(encoderright)+Math.abs(encoderleft))/2<encodervalue){
            motorLeftFront.setPower(-MOTOR_POWER);
            motorLeftBack.setPower(-MOTOR_POWER);
            motorRightFront.setPower(-MOTOR_POWER);
            motorRightBack.setPower(-MOTOR_POWER);
        }
    }

    public void turnright(double encodervalue){
        double encoderleft = motorLeftBack.getCurrentPosition();
        while (Math.abs(encoderleft)<encodervalue){
            motorLeftFront.setPower(MOTOR_POWER_SLOW);
            motorLeftBack.setPower(MOTOR_POWER_SLOW);
        }
    }

    public void turnleft (double encodervalue){
        double encoderright = motorLeftBack.getCurrentPosition();
        while (Math.abs(encoderright)<encodervalue){
            motorRightFront.setPower(MOTOR_POWER_SLOW);
            motorRightBack.setPower(MOTOR_POWER_SLOW);
        }
    }
    public void stopmotors(){
        motorLeftFront.setPower(0);
        motorLeftBack.setPower(0);
        motorRightFront.setPower(0);
        motorRightBack.setPower(0);
    }

}
